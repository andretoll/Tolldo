<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ext="clr-namespace:Tolldo.Extensions">

    <!-- Import colors, fonts and windows -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DynamicColors.xaml"/>
        <ResourceDictionary Source="Fonts.xaml"/>
        <ResourceDictionary Source="Windows.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- Base Flat button -->
    <Style TargetType="{x:Type Button}" x:Key="FlatButton" BasedOn="{StaticResource Hoverless}">
        <Setter Property="Background" Value="{DynamicResource ColorForegroundBrush}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="1" 
                                  Opacity="0.95"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">

                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Padding="10 5"
                                   Text="{TemplateBinding Content}"
                                   Foreground="{StaticResource LightForegroundBrush}"
                                   FontSize="{TemplateBinding FontSize}" />
                        
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            
            <!-- When disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource GrayBackgroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Opacity="0" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            
            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkerColorForegroundBrush}" />
            </Trigger>
            
            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkColorForegroundBrush}" />
            </Trigger>
            
        </Style.Triggers>
    </Style>

    <!-- Flat square button with icon -->
    <Style TargetType="{x:Type Button}" x:Key="FlatIconButtonSquare" BasedOn="{StaticResource FlatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" 
                                   FontFamily="{StaticResource FontAwesome}" 
                                   Foreground="{StaticResource LightForegroundBrush}" 
                                   Padding="10"
                                   FontSize="{TemplateBinding FontSize}" 
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"/>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Flat button with icon -->
    <Style TargetType="{x:Type Button}" x:Key="FlatIconButton" BasedOn="{StaticResource FlatButton}">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="50">
                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" 
                                   FontFamily="{StaticResource FontAwesome}" 
                                   Foreground="{StaticResource LightForegroundBrush}" 
                                   Padding="10"
                                   FontSize="{TemplateBinding FontSize}" 
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"/>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Flat small button with icon -->
    <Style TargetType="{x:Type Button}" x:Key="FlatSmallIconButton" BasedOn="{StaticResource FlatButton}">
        <Setter Property="Foreground" Value="{DynamicResource DarkerColorForegroundBrush}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Opacity="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="50">
                        
                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                   Foreground="{TemplateBinding Foreground}"
                                   FontFamily="{StaticResource FontAwesome}"
                                   FontSize="{TemplateBinding FontSize}" 
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center">

                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="{DynamicResource ColorForegroundBrush}" />
                                    <Style.Triggers>

                                        <!-- When hovering -->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Foreground" Value="{DynamicResource DarkerColorForegroundBrush}" />
                                        </Trigger>

                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorForegroundBrush}" />
            </Trigger>

            <!-- When disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Opacity="0" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource DarkColorForegroundBrush}" />
            </Trigger>

        </Style.Triggers>
    </Style>
    
    <!-- Flat white small button with icon -->
    <Style TargetType="{x:Type Button}" x:Key="FlatWhiteSmallIconButton" BasedOn="{StaticResource FlatSmallIconButton}">
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
        <Style.Triggers>

            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}" />
            </Trigger>

            <!-- When disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource GrayBackgroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Opacity="0" />
                    </Setter.Value>
                </Setter>
            </Trigger>

        </Style.Triggers>
    </Style>
    
    <!-- List button with text and icon -->
    <Style TargetType="{x:Type Button}" x:Key="ListButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            Padding="10 5">

                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <!-- Icon -->
                            <TextBlock Text="{TemplateBinding ext:IconExtension.Icon}"
                                       Grid.Column="0"
                                       Foreground="{DynamicResource ColorForegroundBrush}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="20"
                                       Margin="0 0 15 0"/>

                            <!-- Text -->
                            <TextBlock Text="{TemplateBinding Content}"
                                       Grid.Column="1"
                                       HorizontalAlignment="Right"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontSize="16" />

                        </Grid>
                        
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            
            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource GrayBackgroundBrush}" />
            </Trigger>
            
            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}" />
            </Trigger>
            
        </Style.Triggers>
    </Style>
    
    <!-- Color background without text or icon -->
    <Style TargetType="{x:Type Button}" x:Key="ColorBackgroundButton" BasedOn="{StaticResource FlatIconButton}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Style.Triggers>
            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.85" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Round Button -->
    <Style TargetType="{x:Type Button}" x:Key="RoundButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource ColorForegroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    
                    <Border CornerRadius="20"
                            Padding="10 7"
                            MinWidth="100"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1">

                        <TextBlock Text="{TemplateBinding Content}"
                                   Foreground="{TemplateBinding Foreground}"
                                   VerticalAlignment="Center"
                                   FontSize="{TemplateBinding FontSize}"
                                   Style="{StaticResource MediumTextBlock}"
                                   HorizontalAlignment="Center"/>
                        
                    </Border>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkerColorForegroundBrush}" />
            </Trigger>

            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkColorForegroundBrush}" />
            </Trigger>

            <!-- When disabled -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource GrayForegroundBrush}" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <!-- Primary round button -->
    <Style TargetType="{x:Type Button}" x:Key="PrimaryButton" BasedOn="{StaticResource RoundButton}" />

    <!-- Success round button -->
    <Style TargetType="{x:Type Button}" x:Key="SuccessButton" BasedOn="{StaticResource RoundButton}">
        <Setter Property="Background" Value="ForestGreen" />
        <Style.Triggers>

            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Green" />
            </Trigger>

            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="DarkGreen" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <!-- Link button -->
    <Style TargetType="{x:Type Button}" x:Key="LinkButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <TextBlock Text="{TemplateBinding Content}"
                               FontSize="{TemplateBinding FontSize}"
                               HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalAlignment}">

                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
                                <Style.Triggers>
                                    
                                    <!-- When hovering -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}" />
                                        <Setter Property="TextBlock.TextDecorations" Value="Underline" />
                                    </Trigger>
                                    
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>

                    </TextBlock>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Base RadioButton -->
    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    
                    <BulletDecorator Background="Transparent"
                                     Margin="0 5">
                        
                        <BulletDecorator.Bullet>
                            <Grid Height="20" Width="20">
                                
                                <!-- Outer border -->
                                <Border Name="RadioOuter" 
                                        Background="Transparent" 
                                        BorderBrush="{DynamicResource ColorForegroundBrush}" 
                                        BorderThickness="2" 
                                        CornerRadius="50" />
                                
                                <!-- Inner border -->
                                <Border CornerRadius="50" 
                                        Margin="4" 
                                        Name="RadioMark" 
                                        Background="{DynamicResource ColorForegroundBrush}" 
                                        Visibility="Hidden" />
                                
                            </Grid>
                        </BulletDecorator.Bullet>
                        
                        <!--Text-->
                        <TextBlock Margin="10,0,0,0" 
                                   VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}" 
                                   FontSize="{TemplateBinding FontSize}">
                            
                            <ContentPresenter />
                            
                        </TextBlock>
                    </BulletDecorator>
                    
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="{DynamicResource ColorForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="RadioMark" Property="Opacity" Value="0.3"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Base ToggleButton -->
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource DarkerColorForegroundBrush}" />
        <Setter Property="FontSize" Value="22" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}"
                          ClipToBounds="True"
                          Background="Transparent">
                        
                        <Border CornerRadius="50"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}">                            

                        </Border>

                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                   Foreground="{TemplateBinding Foreground}"
                                   FontFamily="{StaticResource FontAwesome}"
                                   FontSize="{TemplateBinding FontSize}" 
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center">

                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="{DynamicResource ColorForegroundBrush}" />
                                    <Style.Triggers>

                                        <!-- When hovering -->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Foreground" Value="{DynamicResource DarkerColorForegroundBrush}" />
                                        </Trigger>

                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                    </Grid>

                </ControlTemplate>
                
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <!-- When hovering -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ColorForegroundBrush}" />
            </Trigger>           

            <!-- When disabled -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Opacity="0" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!-- When pressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource DarkColorForegroundBrush}" />
            </Trigger>

            <!-- When checked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ColorForegroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />

                <!-- Animate a circle -->
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetProperty="Padding"
                                                Duration="0:0:0.20"
                                                To="20" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetProperty="Padding"
                                                Duration="0:0:0.20"
                                                To="0" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>

            <!-- When hovering and ischecked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkerColorForegroundBrush}" />
            </MultiTrigger>

        </Style.Triggers>

    </Style>

    <!-- Small ToggleButton-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="SmallToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">

        <Style.Triggers>

            <!-- When checked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ColorForegroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />

                <!-- Animate a circle -->
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetProperty="Padding"
                                                Duration="0:0:0.25"
                                                To="15" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetProperty="Padding"
                                                Duration="0:0:0.25"
                                                To="0" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>
